name: CI

on:
  pull_request:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@1.84.0
        with:
          targets: wasm32-wasip1
          components: rustfmt
      
      - name: Format
        run: cargo fmt --all -- --check

      - name: Check
        run: cargo check --release --all --all-features

      - name: Install javy-cli
        run: |
          JAVY_VERSION=$(curl -s https://api.github.com/repos/bytecodealliance/javy/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          curl -L "https://github.com/bytecodealliance/javy/releases/download/${JAVY_VERSION}/javy-x86_64-linux-v${JAVY_VERSION#v}.gz" -o javy.gz
          gunzip javy.gz
          chmod +x javy
          sudo mv javy /usr/local/bin/

      - name: Build
        run: |
          cargo build --target=wasm32-wasip1 --release
          javy init-plugin ./target/wasm32-wasip1/release/bless_plugins.wasm -o bless_plugins.wasm
      
      - name: Build examples
        run: |
          for file in ./examples/*.js; do
            javy build -C plugin=bless_plugins.wasm "$file" -o "${file%.js}.wasm"
          done

  get-features:
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.get-features.outputs.features }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Install toml-cli
        run: cargo install toml-cli
      - name: Extract features from Cargo.toml
        id: get-features
        run: |
          # Extract all feature names from Cargo.toml
          all_features=$(toml get Cargo.toml features | jq -r 'keys[]')

          # Filter out default
          features=$(echo "$all_features" | grep -v -E '^(default)$' | jq -R -s -c 'split("\n") | map(select(length > 0))')

          # Add "default" and "all" to test with default features and all features
          features=$(echo $features | jq -c '. + ["default", "all"]')

          echo "features=$features" >> $GITHUB_OUTPUT
          echo "Detected features: $features"

  feature-matrix:
    needs: get-features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: ${{ fromJson(needs.get-features.outputs.features) }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.85.0
        with:
          toolchain: stable
          targets: wasm32-wasip1
      - name: Check feature ${{ matrix.feature }}
        run: |
          if [ "${{ matrix.feature }}" = "default" ]; then
            cargo check --release
          elif [ "${{ matrix.feature }}" = "all" ]; then
            cargo check --release --all-features
          else
            cargo check --release --no-default-features --features ${{ matrix.feature }}
          fi
